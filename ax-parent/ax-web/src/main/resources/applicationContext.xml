<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:soap="http://cxf.apache.org/bindings/soap"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://cxf.apache.org/bindings/soap
					    http://cxf.apache.org/schemas/configuration/soap.xsd
					    http://cxf.apache.org/jaxws
					    http://cxf.apache.org/schemas/jaxws.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!--       读取db.properties 文件的相关信息           加载属性文件      -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 第一步  配置数据库连接池   对象-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!-- 第二步  配置LocalSessionFactoryBean 对象
                    Spring框架提供的用于整合hibernate的工厂bean
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!--  注入数据库连接池       （问题一：  LoaclSessionFactoryBean 为什么需要数据库连接池）      -->
        <property name="dataSource" ref="dataSource"/>
        <!--注入hibernate相关的属性配置-->
        <property name="hibernateProperties">
            <props>
                <!--配置数据库方言-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <!--自动建表-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--配置是否输出SQL语句-->
                <prop key="hibernate.show_sql">true</prop>
                <!--配置是否格式化  SQL 语句-->
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
        <!--引入hibernate的相关映射文件-->
        <property name="mappingLocations">  <!-- 配置映射文件的位置 -->
            <list>
                <value>classpath:com/itheima/ax/pojo/*.xml</value>  <!-- maven 项目需要这样配置 -->
            </list>
        </property>
    </bean>

    <!--第四步  配置注解开发       开启注解扫描    -->
    <context:component-scan base-package="com.itheima.ax"/>
    <!-- 支持Spring注解 注解驱动-->
    <context:annotation-config/>

    <!--第三步 配置事务管理器   核心事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!--注入sessionFactory  对象 -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--开启注解事务-->
    <tx:annotation-driven/>

    <!--注册crm客户端代理对象-->
    <jaxws:client id="crmClient"
                  serviceClass="com.itheima.crm.service.ICustomerService"
                  address="http://localhost:9696/bos_crm/service/customer">
    </jaxws:client>

    <!-- 配置shiro框架的过滤器工厂对象 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 注入安全管理器对象 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 注入相关页面访问URL -->
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!--注入URL拦截规则 -->
        <property name="filterChainDefinitions">
            <value>
                <!--anon匿名访问,不需要登录 也可以访问-->
                /css/** = anon
                /js/** = anon
                /images/** = anon
                /validatecode.jsp* = anon
                /login.jsp = anon
                /UserAction_login.action = anon
                <!--perms指定权限-->
                /page_base_staff.action = perms["staff"]
                /* = authc <!--authc登录验证-->
            </value>
        </property>
    </bean>

    <!--配置安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--注入bosRealm-->
        <property name="realm" ref="bosRealm"/>
        <!--注入缓存管理器-->
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!--注册缓存管理器-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!--注入ehcache配置文件-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--注册自定义realm-->
    <bean id="bosRealm" class="com.itheima.ax.realm.BosRealm"/>


    <!--开启shiro框架注解支持-->
    <bean id="defaultAdvisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <!--必须使用cglib的方式为Action对象创建代理对象-->
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <!--配置shiro框架提供的切面类,用于创建代理对象-->
    <bean id="authorizationAttributeSourceAdvisor" class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"/>

</beans>